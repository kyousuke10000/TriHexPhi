{
  "name": "🤖 FAQ Answer Collector (Phase 3.5)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 3 * * *"
            }
          ]
        }
      },
      "id": "c80ed7e2-33b8-4ed0-8887-085d86ebfd0d",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2144,
        192
      ]
    },
    {
      "parameters": {
        "documentId": {
          "mode": "id",
          "value": "1SywiLtNP759TQ_dWnYq1XftGTJprZOL9kVx5dlLiH_0"
        },
        "sheetName": {
          "mode": "name",
          "value": "FAQ_Candidates"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "status",
              "lookupValue": "pending"
            }
          ]
        },
        "options": {}
      },
      "id": "acc4c3d5-9fd4-4e5f-a059-b66ee395f0de",
      "name": "Get Pending FAQs",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1936,
        192
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YvL7P7HKwcuiK11r",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "98bdfe96-7e32-4aa5-a295-19dec0023be6",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1648,
        -128
      ]
    },
    {
      "parameters": {
        "url": "https://api.chatwork.com/v2/rooms/382546940/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "force",
              "value": "1"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "cd526cb9-b6f7-4f4c-9fc8-537e5a5265a3",
      "name": "Get Messages After Question",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1520,
        96
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "LnQfObJY55JQWAHf",
          "name": "ChatWork"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 全メッセージを取得\nconst allMessages = $input.all().map(item => item.json);\n\n// 質問のmessage_id（カンマ区切りの最初のID）\nlet questionMessageIds = $('Split In Batches').first().json.chatwork_message_id;\n\n// 科学的記法を文字列に変換（BigInt対応）\nif (typeof questionMessageIds === 'number') {\n  // 科学的記法の場合、BigIntで変換\n  try {\n    questionMessageIds = BigInt(Math.round(questionMessageIds)).toString();\n  } catch (e) {\n    console.log('BigInt conversion failed, using String:', e);\n    questionMessageIds = String(questionMessageIds);\n  }\n} else {\n  questionMessageIds = String(questionMessageIds);\n}\n\nconst firstQuestionId = questionMessageIds.split(',')[0].trim();\n\nconsole.log(`Question message ID: ${firstQuestionId}`);\nconsole.log(`Type: ${typeof firstQuestionId}`);\n\n// 質問より後のメッセージをフィルタ\nconst laterMessages = allMessages.filter(msg => \n  parseInt(msg.message_id) > parseInt(firstQuestionId)\n);\n\nconsole.log(`Found ${laterMessages.length} messages after question`);\n\n// リプライマーカーを検出\n// [rp aid=送信者ID to=受信者ID-返信先メッセージID]\nconst replies = laterMessages.filter(msg => {\n  const body = msg.body || '';\n  // 質問メッセージへのリプライを検出\n  const replyPattern = new RegExp(`\\\\[rp aid=\\\\d+ to=\\\\d+-${firstQuestionId}\\\\]`);\n  const isReply = replyPattern.test(body);\n  \n  if (isReply) {\n    console.log(`Found reply: ${msg.message_id}`);\n    console.log(`Body preview: ${body.substring(0, 100)}`);\n  }\n  \n  return isReply;\n});\n\nconsole.log(`=== Reply Detection ===`);\nconsole.log(`Total replies found: ${replies.length}`);\n\n// リプライが0件の場合、空配列を返す\nif (replies.length === 0) {\n  console.log('No replies found. Skipping...');\n  return [];\n}\n\n// リプライメッセージを返す\nreturn replies.map(reply => ({ json: reply }));"
      },
      "id": "2e564c88-c0d3-4898-9657-9f4681c6fd95",
      "name": "Filter Reply Messages",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1360,
        96
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "reply-check",
              "leftValue": "={{ $json.message_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "15ff9909-ac39-4d83-af88-197131c64886",
      "name": "Reply Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1184,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "// 全てのリプライを取得\nconst allReplies = $input.all();\n\nif (allReplies.length === 0) {\n  console.log('No replies to process');\n  return [];\n}\n\nconsole.log(`Processing ${allReplies.length} replies`);\n\n// 最も長い回答を選択（詳しい回答ほど良いと仮定）\nconst bestReply = allReplies.reduce((best, current) => {\n  const bestLength = (best.json.body || '').length;\n  const currentLength = (current.json.body || '').length;\n  return currentLength > bestLength ? current : best;\n});\n\n// リプライマーカーを削除してクリーンアップ\nconst rawBody = bestReply.json.body || '';\nconst cleanAnswer = rawBody\n  .replace(/\\[rp aid=\\d+ to=\\d+-\\d+\\]/g, '') // リプライマーカー除去\n  .replace(/\\[To:[^\\]]+\\]/g, '') // To:マーカー除去\n  .trim();\n\nconsole.log(`=== Best Answer Selected ===`);\nconsole.log(`Message ID: ${bestReply.json.message_id}`);\nconsole.log(`Length: ${cleanAnswer.length} characters`);\nconsole.log(`Preview: ${cleanAnswer.substring(0, 100)}...`);\n\n// 元のFAQデータを取得\nconst faqData = $('Split In Batches').first().json;\n\nconsole.log(`Phase 3.4 Answer: ${faqData.answer.substring(0, 80)}...`);\n\nreturn [{\n  json: {\n    row_number: faqData.row_number,\n    timestamp: faqData.timestamp,\n    title: faqData.title,\n    question: faqData.question,\n    original_answer: faqData.answer, // ← Phase 3.4の模範回答を保存\n    answer: cleanAnswer, // ← 実際の返信（会話調）\n    category: faqData.category,\n    priority: faqData.priority,\n    frequency: faqData.frequency,\n    chatwork_message_id: faqData.chatwork_message_id,\n    status: 'replied'\n  }\n}];"
      },
      "id": "c9162437-aa12-4a0a-a718-abfea11d3ce7",
      "name": "Extract Best Answer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -944,
        96
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "mode": "id",
          "value": "1SywiLtNP759TQ_dWnYq1XftGTJprZOL9kVx5dlLiH_0"
        },
        "sheetName": {
          "mode": "name",
          "value": "FAQ_Candidates"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "title"
          ],
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "question",
              "displayName": "question",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "answer",
              "displayName": "answer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "priority",
              "displayName": "priority",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "frequency",
              "displayName": "frequency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "chatwork_message_id",
              "displayName": "chatwork_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "rowNumber",
              "displayName": "rowNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "d50f58cc-2d49-4752-93f8-e16b7e531c68",
      "name": "Update FAQ Answer",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -224,
        -144
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YvL7P7HKwcuiK11r",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "d0735ae9-3a95-4cab-afea-4265d0f5c091",
      "name": "Aggregate Results",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -752,
        240
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "# 役割\nチャットワークでの実際の会話調の返信を、FAQ記事として再構築する。\n\n# 重要原則\n1. **事実の抽出**\n   - 実際の返信から具体的な事実・手順・情報を抽出\n   - 会話調の表現を説明調に変換\n   - 絵文字や記号を削除\n\n2. **具体性の維持**\n   - Phase 3.4で推測された具体的な情報を活用\n   - 手順、リンク、期限、場所などを明確に\n   - 「〜してください」という明確な指示形式\n\n3. **情報の統合**\n   - 実際の返信にある事実を最優先\n   - Phase 3.4の推測は補完的に使用\n   - 矛盾する場合は実際の返信を優先\n\n4. **品質基準**\n   - 150-300文字\n   - 具体的で実践可能\n   - 初心者にも分かりやすい\n\n# 変換の例\n\n## 例1：専門用語のサポート\n【実際の返信】\n「わからない単語があったらチャットワークで聞いてね！セッション後でもOKです〜」\n\n【Phase 3.4の推測】\n「専門用語集を確認してください。チャットワークで質問できます。」\n\n【FAQ回答（統合後）】\n「わからない単語やフレーズがある場合は、チャットワークで質問してください。各セッション後のフォローアップでも対応可能です。また、事前に専門用語集を確認しておくことをお勧めします。」\n\n## 例2：課題の提出方法\n【実際の返信】\n「Week1の投稿はチャットワークでお願いします〜締切は日曜日の23:59ですよ」\n\n【Phase 3.4の推測】\n「Week1の課題をチャットワークに投稿してください。」\n\n【FAQ回答（統合後）】\n「Week1の課題は、チャットワークに投稿してください。提出期限は日曜日の23:59（日本時間）です。」\n\n## 例3：資料へのアクセス\n【実際の返信】\n「資料はNotionにあります！マイページからリンク飛べますよー」\n\n【Phase 3.4の推測】\n「資料はNotionで確認できます。」\n\n【FAQ回答（統合後）】\n「資料はNotionで確認できます。マイページからNotionへのリンクにアクセスしてください。」\n\n## 例4：イベント参加方法\n【実際の返信】\n「Zoomリンクは前日にメールで送ります！当日は10分前から入室OKです」\n\n【Phase 3.4の推測】\n「イベント参加方法はメールで案内されます。」\n\n【FAQ回答（統合後）】\n「イベントのZoomリンクは前日にメールで送付されます。当日は開始10分前から入室可能です。」\n\n# 出力形式\n整形後のFAQ回答のみを出力してください。\nJSONや余計な説明は不要です。",
              "role": "system"
            },
            {
              "content": "=【質問】\n{{ $('Extract Best Answer').item.json.question }}\n\n【Phase 3.4で生成された模範回答】\n{{ $('Extract Best Answer').item.json.original_answer }}\n\n【実際のチャットワーク返信】\n{{ $('Extract Best Answer').item.json.answer }}\n\n上記の情報を統合して、最も具体的で実用的なFAQ回答を生成してください。\n\n要件:\n- 実際の返信から事実を抽出（最優先）\n- Phase 3.4の具体性を維持\n- 会話調→説明調に変換\n- 150-300文字"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -784,
        -144
      ],
      "id": "26e0b79e-1423-4cd9-af09-a05721d1a962",
      "name": "OpenAI Reformat Answer",
      "credentials": {
        "openAiApi": {
          "id": "J33Jkek1x9rhPZBW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract Best Answerからのデータ\nconst faqData = $('Extract Best Answer').first().json;\n\n// OpenAI Reformat Answerからの整形済み回答\nconst reformattedAnswer = $input.first().json.message.content.trim();\n\nconsole.log('=== FAQ Update ===');\nconsole.log(`Question: ${faqData.question}`);\nconsole.log(`Original: ${faqData.answer.substring(0, 50)}...`);\nconsole.log(`Reformatted: ${reformattedAnswer}`);\n\nreturn [{\n  json: {\n    row_number: faqData.row_number,\n    timestamp: faqData.timestamp,\n    title: faqData.title,\n    question: faqData.question,\n    answer: reformattedAnswer, // ← 整形済み回答を使用\n    category: faqData.category,\n    priority: faqData.priority,\n    frequency: faqData.frequency,\n    chatwork_message_id: faqData.chatwork_message_id,\n    status: 'completed'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        -144
      ],
      "id": "161628be-9025-4de2-b4b1-04142205f7ee",
      "name": "Merge FAQ Data"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Pending FAQs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pending FAQs": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "Aggregate Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Messages After Question",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Messages After Question": {
      "main": [
        [
          {
            "node": "Filter Reply Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Reply Messages": {
      "main": [
        [
          {
            "node": "Reply Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply Found?": {
      "main": [
        [
          {
            "node": "Extract Best Answer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Best Answer": {
      "main": [
        [
          {
            "node": "OpenAI Reformat Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update FAQ Answer": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Reformat Answer": {
      "main": [
        [
          {
            "node": "Merge FAQ Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge FAQ Data": {
      "main": [
        [
          {
            "node": "Update FAQ Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7b8dd161-754e-45bf-ba18-32222e79d0a2",
  "meta": {
    "instanceId": "bb6582f136488f8663186c75084ae9be2ac2ce1a6068064fd0778c5e05f7b8d2"
  },
  "id": "aVMBvj8j1ttDcvYh",
  "tags": []
}