{
  "name": "🔮 Phase 3.3.3: Coherence Tracker",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "20 2 * * *"
            }
          ]
        }
      },
      "id": "b15ebf61-afa9-4585-b955-76989b6965a0",
      "name": "Schedule Trigger (02:20 JST)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -2752,
        512
      ]
    },
    {
      "parameters": {
        "jsCode": "const now = new Date();\nconst jstOffset = 9 * 60 * 60 * 1000;\nconst jstNow = new Date(now.getTime() + jstOffset);\n\nconst windowEnd = new Date(jstNow);\nwindowEnd.setHours(23, 59, 59, 999);\n\nconst windowStart = new Date(windowEnd);\nwindowStart.setDate(windowStart.getDate() - 14);\nwindowStart.setHours(0, 0, 0, 0);\n\nconst windowStartISO = windowStart.toISOString().replace('Z', '+09:00');\nconst windowEndISO = windowEnd.toISOString().replace('Z', '+09:00');\n\nconsole.log(`Window: ${windowStartISO} - ${windowEndISO}`);\n\nreturn [{\n  json: {\n    window_start: windowStartISO,\n    window_end: windowEndISO,\n    window_start_ts: windowStart.getTime(),\n    window_end_ts: windowEnd.getTime()\n  }\n}];"
      },
      "id": "d60a35e2-e554-4f91-ad66-763badfda6c5",
      "name": "Calculate 14-day Window",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2544,
        512
      ]
    },
    {
      "parameters": {
        "url": "https://sheets.googleapis.com/v4/spreadsheets/1SywiLtNP759TQ_dWnYq1XftGTJprZOL9kVx5dlLiH_0/values/User_Progress!A:T",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "options": {}
      },
      "id": "2a56a657-ed2e-4d7e-b4eb-b2858f0d49c1",
      "name": "Get User_Progress",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2336,
        512
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YvL7P7HKwcuiK11r",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const windowData = $('Calculate 14-day Window').first().json;\nconst progressData = $json;\nconst rows = progressData.values || [];\nconst dataRows = rows.slice(1);\n\nconst creators = dataRows.filter(row => {\n  const currentRole = String(row[2]).toLowerCase();\n  return currentRole === 'creator';\n}).map(row => ({\n  user_id: String(row[0]),\n  username: row[1],\n  current_role: row[2],\n  spiral_score: row[3],\n  window_start: windowData.window_start,\n  window_end: windowData.window_end,\n  window_start_ts: windowData.window_start_ts,\n  window_end_ts: windowData.window_end_ts\n}));\n\nconsole.log(`Found ${creators.length} Creators`);\n\nif (creators.length === 0) {\n  return [{ json: { has_creators: false } }];\n}\n\nreturn creators.map(c => ({ json: { ...c, has_creators: true } }));"
      },
      "id": "c754bb5f-b973-4ae6-bfe1-4350f758e0b1",
      "name": "Filter Creators Only",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        512
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.has_creators }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Has Creators"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "fb46d3c5-df81-451a-9be4-4b28b2bccc37",
      "name": "Switch: Has Creators?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -1920,
        512
      ]
    },
    {
      "parameters": {},
      "id": "193dfb88-d267-4a6e-a089-da44e121814e",
      "name": "NoOp - No Creators",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1712,
        688
      ]
    },
    {
      "parameters": {
        "url": "https://sheets.googleapis.com/v4/spreadsheets/1SywiLtNP759TQ_dWnYq1XftGTJprZOL9kVx5dlLiH_0/values/KPI_Log!A:K",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "options": {}
      },
      "id": "45688202-e545-49a7-9b85-4b93e68cc0b1",
      "name": "Get KPI_Log (14 days)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1712,
        368
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YvL7P7HKwcuiK11r",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ========================================\n// Phase 3.3.3-A: Coherence Tracker (Simple)\n// Creator guidance acts detection\n// ========================================\n\nconst creators = $('Filter Creators Only').all().map(item => item.json);\nconst kpiData = $json;\nconst rows = kpiData.values || [];\nconst dataRows = rows.slice(1);\n\nconst windowStartTs = creators[0].window_start_ts;\nconst windowEndTs = creators[0].window_end_ts;\n\nconsole.log(`Phase 3.3.3-A: Analyzing ${creators.length} Creators`);\nconsole.log(`KPI Log rows: ${dataRows.length}`);\nconsole.log(`Window: ${new Date(windowStartTs).toISOString()} - ${new Date(windowEndTs).toISOString()}`);\n\n// Parse KPI_Log\n// Columns: A=timestamp, B=workflow, C=status, D=author, E=message_id, \n//          F=content_preview, G=user_id, H=thread_id, I=thread_url, \n//          J=mirror_json, K=user_content_full\nconst messages = dataRows.map(row => ({\n  timestamp: row[0],\n  workflow: row[1],\n  status: row[2],\n  author: row[3],\n  message_id: row[4],\n  content_preview: row[5],\n  user_id: String(row[6]),\n  thread_id: String(row[7]),\n  thread_url: row[8],\n  mirror_json: row[9],\n  user_content_full: row[10] || row[5] || ''\n})).filter(msg => {\n  // Filter to window\n  const msgDate = new Date(msg.timestamp);\n  return msgDate.getTime() >= windowStartTs && msgDate.getTime() <= windowEndTs;\n});\n\nconsole.log(`Messages in window: ${messages.length}`);\n\n// Guidance keywords\nconst GUIDANCE_KEYWORDS = {\n  proposal: ['してみては', '試すと良い', '試してみ', 'おすすめ', '提案'],\n  summary: ['まとめると', 'つまり', '整理すると', '要約すると'],\n  instruction: ['やってみましょう', 'しましょう', '次は', 'ステップ']\n};\n\n// Analyze each Creator\nconst results = creators.map(creator => {\n  const creatorId = creator.user_id;\n  \n  // Get Creator's own threads\n  const creatorThreads = new Set(\n    messages\n      .filter(msg => msg.user_id === creatorId)\n      .map(msg => msg.thread_id)\n  );\n  \n  // Find Creator's posts in OTHER users' threads\n  const guidanceActs = messages.filter(msg => {\n    // Posted by this Creator\n    if (msg.user_id !== creatorId) return false;\n    \n    // In someone else's thread\n    if (creatorThreads.has(msg.thread_id)) return false;\n    \n    return true;\n  });\n  \n  // Classify guidance acts\n  let proposalCount = 0;\n  let summaryCount = 0;\n  let instructionCount = 0;\n  const sampleLinks = [];\n  \n  guidanceActs.forEach(act => {\n    const content = act.user_content_full.toLowerCase();\n    \n    // Check keywords\n    let matched = false;\n    \n    if (GUIDANCE_KEYWORDS.proposal.some(kw => content.includes(kw))) {\n      proposalCount++;\n      matched = true;\n    }\n    \n    if (GUIDANCE_KEYWORDS.summary.some(kw => content.includes(kw))) {\n      summaryCount++;\n      matched = true;\n    }\n    \n    if (GUIDANCE_KEYWORDS.instruction.some(kw => content.includes(kw))) {\n      instructionCount++;\n      matched = true;\n    }\n    \n    // Sample links (first 3)\n    if (matched && sampleLinks.length < 3 && act.thread_url) {\n      sampleLinks.push({\n        type: proposalCount > 0 ? 'proposal' : (summaryCount > 0 ? 'summary' : 'instruction'),\n        url: act.thread_url,\n        preview: act.content_preview\n      });\n    }\n  });\n  \n  const guidanceCount = guidanceActs.length;\n  \n  // Simple CohScore calculation (Phase 1)\n  // CohScore = normalize(guidance_count, max=10) * 100\n  const cohScore = Math.min((guidanceCount / 10) * 100, 100).toFixed(2);\n  \n  console.log(`Creator ${creator.username}: ${guidanceCount} guidance acts (Proposal=${proposalCount}, Summary=${summaryCount}, Instruction=${instructionCount})`);\n  \n  return {\n    ...creator,\n    guidance_count: guidanceCount,\n    proposal_count: proposalCount,\n    summary_count: summaryCount,\n    instruction_count: instructionCount,\n    effect_depth_gain: 0, // Phase 2\n    effect_cadence_gain: 0, // Phase 2\n    effect_action_started: 0, // Phase 2\n    coh_score: parseFloat(cohScore),\n    sample_links: JSON.stringify(sampleLinks),\n    guided_users: '[]' // Phase 2\n  };\n});\n\nconsole.log('Analysis complete');\n\nreturn results.map(r => ({ json: r }));"
      },
      "id": "134dba5d-69fc-460e-a10b-a70304467182",
      "name": "Analyze Creator Guidance",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1504,
        368
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const now = new Date();\nconst jstOffset = 9 * 60 * 60 * 1000;\nconst jstNow = new Date(now.getTime() + jstOffset);\nconst timestamp = jstNow.toISOString().replace('Z', '+09:00');\n\nconst userId = $json.user_id;\nconst username = $json.username;\nconst windowStart = $json.window_start;\nconst windowEnd = $json.window_end;\nconst idemKey = `coh:${userId}:${windowEnd}`;\n\nreturn {\n  json: {\n    ...$json,\n    idem_key: idemKey,\n    updated_at: timestamp,\n    notes: 'Phase 3.3.3 auto-analysis'\n  }\n};"
      },
      "id": "ba38469a-5e47-4754-a5e0-f9f4698b12d8",
      "name": "Prepare Coherence Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1296,
        368
      ]
    },
    {
      "parameters": {
        "url": "https://sheets.googleapis.com/v4/spreadsheets/1SywiLtNP759TQ_dWnYq1XftGTJprZOL9kVx5dlLiH_0/values/Coherence_Score!A:M",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "options": {}
      },
      "id": "47ac408c-5b53-4527-b2c4-3d63f727c157",
      "name": "Get Existing Coherence_Score",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1088,
        368
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YvL7P7HKwcuiK11r",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const coherenceData = $('Prepare Coherence Data').item.json;\nconst existingData = $json;\nconst rows = existingData.values || [];\nconst dataRows = rows.slice(1);\n\nconst idemKey = coherenceData.idem_key;\nconst existingRow = dataRows.find(row => row[12] === idemKey);\n\nif (existingRow) {\n  console.log(`Coherence record exists: ${idemKey} - SKIP`);\n  // Return empty append_body to avoid error in next node\n  return { \n    json: { \n      action: 'skip', \n      reason: 'already_exists',\n      append_body: { values: [] } // Empty values to prevent error\n    } \n  };\n}\n\n// Append new record\nconst appendUrl = 'https://sheets.googleapis.com/v4/spreadsheets/1SywiLtNP759TQ_dWnYq1XftGTJprZOL9kVx5dlLiH_0/values/Coherence_Score!A:M:append?valueInputOption=USER_ENTERED';\n\nconst appendBody = {\n  values: [[\n    coherenceData.user_id,\n    coherenceData.username,\n    coherenceData.window_start,\n    coherenceData.window_end,\n    coherenceData.guidance_count,\n    coherenceData.effect_depth_gain,\n    coherenceData.effect_cadence_gain,\n    coherenceData.effect_action_started,\n    coherenceData.coh_score,\n    coherenceData.sample_links,\n    coherenceData.updated_at,\n    coherenceData.notes,\n    coherenceData.idem_key\n  ]]\n};\n\nconsole.log(`New Coherence record: ${idemKey} - APPEND`);\n\nreturn {\n  json: {\n    action: 'append',\n    append_url: appendUrl,\n    append_body: appendBody,\n    coherence_data: coherenceData\n  }\n};"
      },
      "id": "97c27cb7-e635-4b01-89cf-68688009696c",
      "name": "Update Coherence_Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        368
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sheets.googleapis.com/v4/spreadsheets/1SywiLtNP759TQ_dWnYq1XftGTJprZOL9kVx5dlLiH_0/values/Coherence_Score!A:M:append?valueInputOption=USER_ENTERED",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.append_body }}",
        "options": {}
      },
      "id": "a8282da0-aeb0-4557-b80c-144cca7fd03b",
      "name": "Append to Coherence_Score",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -672,
        368
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "YvL7P7HKwcuiK11r",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const allResults = $('Prepare Coherence Data').all().map(item => item.json);\nconst totalCreators = allResults.length;\nconst totalGuidance = allResults.reduce((sum, r) => sum + r.guidance_count, 0);\nconst avgCohScore = totalCreators > 0 ? (allResults.reduce((sum, r) => sum + r.coh_score, 0) / totalCreators).toFixed(2) : 0;\n\nconst message = `🔮 **Phase 3.3.3: Coherence Analysis Complete**\n\n**Creators analyzed:** ${totalCreators}\n**Total guidance acts:** ${totalGuidance}\n**Average CohScore:** ${avgCohScore}\n\n━━━━━━━━━━━━━━━━━━━━\n_TriHexΦ Spiral System | Phase 3.3.3_`;\n\nreturn [{ json: { kpi_message: message } }];"
      },
      "id": "6b5bece6-144f-4c1a-8ae7-c1d990819658",
      "name": "Build KPI Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        368
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://discord.com/api/v10/channels/1424549853375234118/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "discordBotApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.kpi_message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "02ae334e-7c77-4097-8ccb-057322a90594",
      "name": "Log to #kpi-log",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        368
      ],
      "credentials": {
        "discordBotApi": {
          "id": "OsNxV1rUyzVam6wZ",
          "name": "Discord Bot account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger (02:20 JST)": {
      "main": [
        [
          {
            "node": "Calculate 14-day Window",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate 14-day Window": {
      "main": [
        [
          {
            "node": "Get User_Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User_Progress": {
      "main": [
        [
          {
            "node": "Filter Creators Only",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Creators Only": {
      "main": [
        [
          {
            "node": "Switch: Has Creators?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch: Has Creators?": {
      "main": [
        [
          {
            "node": "Get KPI_Log (14 days)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NoOp - No Creators",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get KPI_Log (14 days)": {
      "main": [
        [
          {
            "node": "Analyze Creator Guidance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Creator Guidance": {
      "main": [
        [
          {
            "node": "Prepare Coherence Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Coherence Data": {
      "main": [
        [
          {
            "node": "Get Existing Coherence_Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Coherence_Score": {
      "main": [
        [
          {
            "node": "Update Coherence_Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Coherence_Score": {
      "main": [
        [
          {
            "node": "Append to Coherence_Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append to Coherence_Score": {
      "main": [
        [
          {
            "node": "Build KPI Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build KPI Notification": {
      "main": [
        [
          {
            "node": "Log to #kpi-log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "871fd791-7bea-44a2-88f3-521d75957ed2",
  "meta": {
    "instanceId": "bb6582f136488f8663186c75084ae9be2ac2ce1a6068064fd0778c5e05f7b8d2"
  },
  "id": "0vOXuvydQ2YEaVBk",
  "tags": []
}