{
  "name": "Phase 3.6 - ChatWork FAQ Bot",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatwork-faq-bot",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        720,
        -288
      ],
      "webhookId": "55e90f01-f582-454d-9a52-723b6f8ddefa"
    },
    {
      "parameters": {
        "functionCode": "// ChatWork Webhook„Åã„Çâ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊäΩÂá∫\nconst input = $input.item.json;\n\n// „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞\nconsole.log('üì• INPUTÂÖ®‰Ωì:', JSON.stringify(input).substring(0, 200));\n\n// Webhook Trigger„ÅÆÂ†¥ÂêàÔºàÊ≠£„Åó„ÅÑÊßãÈÄ†Ôºâ\nif (input.body && input.body.webhook_event) {\n  const webhookEvent = input.body.webhook_event;\n  const messageBody = String(webhookEvent.body || '');\n  const accountId = String(webhookEvent.account_id || '');\n  \n  console.log('üì© „É°„ÉÉ„Çª„Éº„Ç∏:', messageBody.substring(0, 100));\n  console.log('üë§ account_id:', accountId);\n  \n  // üî• BotÈô§Â§ñ„É≠„Ç∏„ÉÉ„ÇØ\n  const BOT_ACCOUNT_ID = '10774184';\n  \n  // Êù°‰ª∂1: BOT„ÅÆaccount_id\n  if (accountId === BOT_ACCOUNT_ID) {\n    console.log('ü§ñ BOTÊ§úÁü•(ID) - ÂÅúÊ≠¢');\n    return [];\n  }\n  \n  // Êù°‰ª∂2: [totest_user]„Çø„Ç∞\n  if (messageBody.includes('[totest_user]')) {\n    console.log('ü§ñ BOTÊ§úÁü•([totest_user]) - ÂÅúÊ≠¢');\n    return [];\n  }\n  \n  // Êù°‰ª∂3: [To:Êï∞Â≠ó]„Çø„Ç∞\n  if (messageBody.match(/\\[To:\\d+\\]/)) {\n    console.log('ü§ñ BOTÊ§úÁü•([To:]) - ÂÅúÊ≠¢');\n    return [];\n  }\n  \n  // ‰∫∫Èñì„ÅÆÊäïÁ®ø ‚Üí Âá¶ÁêÜÁ∂öË°å\n  console.log('‚úÖ ‰∫∫Èñì„ÅÆÊäïÁ®ø - Âá¶ÁêÜÁ∂öË°å');\n  return {\n    json: {\n      user_message: messageBody,\n      room_id: webhookEvent.room_id,\n      message_id: webhookEvent.message_id,\n      account_id: accountId,\n      timestamp: webhookEvent.send_time\n    }\n  };\n}\n\n// ‚ö†Ô∏è webhook_event„Åå„Å™„ÅÑÂ†¥Âêà = „Ç®„É©„Éº\nconsole.log('‚ùå „Ç®„É©„Éº: webhook_event„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');\nconsole.log('INPUTÊßãÈÄ†:', Object.keys(input));\nreturn [];"
      },
      "id": "extract-message",
      "name": "Extract Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        256,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"input\": $json.user_message, \"model\": \"text-embedding-3-small\"} }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "openai-embedding",
      "name": "Generate Question Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        512,
        0
      ],
      "credentials": {
        "openAiApi": {
          "id": "J33Jkek1x9rhPZBW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const embedding = $input.item.json.data[0].embedding;\n\nreturn {\n  json: {\n    embedding_vector: embedding,\n    user_message: $('Extract Message').item.json.user_message,\n    room_id: $('Extract Message').item.json.room_id,\n    message_id: $('Extract Message').item.json.message_id\n  }\n};"
      },
      "id": "prepare-vector",
      "name": "Prepare Vector for Supabase",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        752,
        0
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "score-check",
      "name": "Check if FAQ Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1472,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.chatwork.com/v2/rooms/{{ $json.room_id }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "body",
              "value": "=[To:{{ $json.account_id }}]\n{{ $json.answer }}"
            }
          ]
        },
        "options": {}
      },
      "id": "chatwork-reply",
      "name": "Send ChatWork Reply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2368,
        -96
      ],
      "credentials": {
        "chatWorkApi": {
          "name": "ChatWork"
        },
        "httpHeaderAuth": {
          "id": "olUlPDWadwlg2p0q",
          "name": "ChatWork Bot API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://discord.com/api/v10/channels/1424549644523798609/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "discordBotApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"content\": \"**ü§ñ ChatWork FAQ Bot - ÂõûÁ≠î„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì**\\n\\n**Ë≥™Âïè:**\\n\" + $('Extract Message').item.json.user_message + \"\\n\\n**Room ID:** \" + $('Extract Message').item.json.room_id + \"\\n**Message ID:** \" + $('Extract Message').item.json.message_id + \"\\n\\nÈ°û‰ººÂ∫¶0.7‰ª•‰∏ä„ÅÆFAQ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\\nÊâãÂãï„ÅßÂõûÁ≠î„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ\"\n} }}",
        "options": {}
      },
      "id": "discord-transfer",
      "name": "Transfer to Discord (No Answer)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1920,
        112
      ],
      "credentials": {
        "discordBotApi": {
          "id": "OsNxV1rUyzVam6wZ",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Supabase„É¨„Çπ„Éù„É≥„Çπ„ÇíË©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞\nconst items = $input.all();\n\nconsole.log('\\n========== SUPABASE RESPONSE DEBUG ==========');\nconsole.log('Total items received:', items.length);\n\n// ÂÖÉ„ÅÆ„Éé„Éº„ÉâÂêç„ÇíÁ¢∫Ë™ç\nconsole.log('Previous node:', $input.first().pairedItem);\n\nif (items.length > 0) {\n  items.forEach((item, index) => {\n    console.log(`\\n--- Item ${index + 1} ---`);\n    console.log('Keys:', Object.keys(item.json));\n    console.log('Type:', typeof item.json);\n    console.log('Is Array?:', Array.isArray(item.json));\n    \n    // ÈÖçÂàó„ÅÆÂ†¥Âêà\n    if (Array.isArray(item.json)) {\n      console.log('Array length:', item.json.length);\n      if (item.json.length > 0) {\n        console.log('First array item:', JSON.stringify(item.json[0], null, 2));\n      }\n    }\n    \n    console.log('\\nFull data:');\n    console.log(JSON.stringify(item.json, null, 2));\n  });\n} else {\n  console.log('\\n‚ùå ERROR: No items returned!');\n  console.log('\\nPossible causes:');\n  console.log('1. Supabase API returned empty array []');\n  console.log('2. HTTP Request failed');\n  console.log('3. Response parsing failed');\n}\n\nconsole.log('\\n========== END DEBUG ==========\\n');\n\nreturn items;"
      },
      "id": "debug-improved",
      "name": "Debug: Detailed Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1216,
        0
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "6109862f-1ccf-48ba-83fd-bcb8e522a68d",
      "name": "When clicking ‚ÄòExecute workflow‚Äô"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://nrbserphtykbhwdowfsz.supabase.co/rest/v1/rpc/match_faqs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"query_embedding\": $json.embedding_vector,\n  \"match_threshold\": 0.3,\n  \"match_count\": 5\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        0
      ],
      "id": "37c2d35d-b9a8-4c1d-8d0a-bdc34c397de7",
      "name": "Search Similar FAQs",
      "credentials": {
        "supabaseApi": {
          "id": "3daaocVPKLCZpzl5",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.dify.ai/v1/chat-messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer app-SsqC2JdPXGAGZngbJ4zU1PL4"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n  {\n    \"query\": $json.user_question,\n    \"inputs\": {},\n    \"response_mode\": \"streaming\",\n    \"conversation_id\": \"\",\n    \"user\": \"chatwork_\" + $json.account_id + \"_\" + $now.toMillis()\n  }\n}}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "text"
            }
          },
          "timeout": 6000
        }
      },
      "id": "dify-agent",
      "name": "Call Dify API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1904,
        -96
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "24fKhmR7VXQzVQVp",
          "name": "Dify API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ===================================\n// Prepare Dify Request (ÊúÄÁµÇÁâà)\n// ===================================\n\nconst userMessage = $('Extract Message').item.json.user_message;\n\nreturn {\n  json: {\n    user_question: userMessage,\n    user_message: userMessage,\n    room_id: $('Extract Message').item.json.room_id,\n    account_id: $('Extract Message').item.json.account_id\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        -96
      ],
      "id": "abb66c4e-d63b-41fe-8185-2d6710aa82b1",
      "name": "Prepare Dify Request"
    },
    {
      "parameters": {
        "jsCode": "// ===================================\n// Parse Streaming ResponseÔºà‰øÆÊ≠£ÁâàÔºâ\n// ===================================\n\n// ‚ùå ÈñìÈÅï„ÅÑ\n// const responseBody = $input.item.json.body;\n\n// ‚úÖ Ê≠£„Åó„ÅÑ\nconst responseBody = $input.item.json.data;  // ‚Üê „Åì„Åì„ÇíÂ§âÊõ¥\n\nconsole.log('\\n========== PARSE STREAMING RESPONSE DEBUG ==========');\nconsole.log('Response Body Exists:', !!responseBody);\nconsole.log('Response Body Type:', typeof responseBody);\nconsole.log('Response Body Length:', responseBody ? responseBody.length : 0);\n\nif (!responseBody) {\n  console.log('‚ùå ERROR: No response body!');\n  return {\n    json: {\n      answer: 'Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ',\n      conversation_id: '',\n      message_id: '',\n      user_message: $('Prepare Dify Request').item.json.user_message,\n      room_id: $('Prepare Dify Request').item.json.room_id,\n      account_id: $('Prepare Dify Request').item.json.account_id\n    }\n  };\n}\n\nconsole.log('\\n--- First 500 chars of response body ---');\nconsole.log(responseBody.substring(0, 500));\n\nconst lines = responseBody.split('\\n');\nconsole.log('\\n--- Parsing lines ---');\nconsole.log('Total lines:', lines.length);\n\nlet fullAnswer = '';\nlet conversationId = '';\nlet messageId = '';\nlet linesParsed = 0;\nlet linesWithData = 0;\nlet agentMessageCount = 0;\n\nfor (let i = 0; i < lines.length; i++) {\n  const line = lines[i];\n  \n  if (line.startsWith('data: ')) {\n    linesWithData++;\n    \n    try {\n      const jsonStr = line.substring(6);\n      const data = JSON.parse(jsonStr);\n      linesParsed++;\n      \n      console.log(`Line ${i}: event=\"${data.event}\"`);\n      \n      // agent_message „Ç§„Éô„É≥„Éà\n      if (data.event === 'agent_message') {\n        agentMessageCount++;\n        const answerPart = data.answer || '';\n        fullAnswer += answerPart;\n        console.log(`  ‚úÖ agent_message #${agentMessageCount}: added ${answerPart.length} chars`);\n      }\n      \n      // message_end „Ç§„Éô„É≥„Éà\n      if (data.event === 'message_end') {\n        conversationId = data.conversation_id || '';\n        messageId = data.message_id || '';\n        console.log('  ‚úÖ message_end: conversation_id=' + conversationId);\n      }\n      \n    } catch (e) {\n      console.log(`Line ${i}: JSON parse error - ${e.message}`);\n    }\n  }\n}\n\nconsole.log('\\n--- Summary ---');\nconsole.log('Lines with \"data:\": ', linesWithData);\nconsole.log('Lines parsed successfully:', linesParsed);\nconsole.log('agent_message events:', agentMessageCount);\nconsole.log('Full Answer Length:', fullAnswer.length);\nconsole.log('Full Answer Preview (first 200 chars):', fullAnswer.substring(0, 200));\n\nconsole.log('\\n========== END PARSE DEBUG ==========\\n');\n\nreturn {\n  json: {\n    answer: fullAnswer || 'ÂõûÁ≠î„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü',\n    conversation_id: conversationId,\n    message_id: messageId,\n    user_message: $('Prepare Dify Request').item.json.user_message,\n    room_id: $('Prepare Dify Request').item.json.room_id,\n    account_id: $('Prepare Dify Request').item.json.account_id,\n    // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇÇËøΩÂä†\n    debug_info: {\n      total_lines: lines.length,\n      lines_with_data: linesWithData,\n      lines_parsed: linesParsed,\n      agent_message_count: agentMessageCount,\n      answer_length: fullAnswer.length\n    }\n  }\n};"
      },
      "id": "bc2a06e7-a226-40d5-8ad0-49a258fe3fff",
      "name": "Parse Streaming Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2160,
        -96
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://nrbserphtykbhwdowfsz.supabase.co/rest/v1/faq_logs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "resolution=ignore-duplicates"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"timestamp\": \"{{ $now.toISO() }}\",\n  \"channel\": \"chatwork\",\n  \"msg_id\": \"{{ $json.message_id }}\",\n  \"route\": \"success\",\n  \"idem_key\": \"{{ 'faq_log:chatwork:' + $json.message_id + ':' + $now.toMillis() }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2576,
        -96
      ],
      "id": "2e95223e-9692-4c89-8da8-f9544b45d0dd",
      "name": "Log to faq_logs (Success)",
      "credentials": {
        "supabaseApi": {
          "id": "3daaocVPKLCZpzl5",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://nrbserphtykbhwdowfsz.supabase.co/rest/v1/faq_logs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "resolution=ignore-duplicates"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"timestamp\": \"{{ $now.toISO() }}\",\n  \"channel\": \"chatwork\",\n  \"msg_id\": \"{{ $('Extract Message').item.json.message_id }}\",\n  \"route\": \"success\",\n  \"idem_key\": \"{{ 'faq_log:chatwork:fallback:' + $('Extract Message').item.json.message_id + ':' + $now.toMillis() }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2160,
        112
      ],
      "id": "c6bed56b-35fe-4869-a289-e4f7a841f78e",
      "name": "Log to faq_logs (Fallback)",
      "credentials": {
        "supabaseApi": {
          "id": "3daaocVPKLCZpzl5",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Extract Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message": {
      "main": [
        [
          {
            "node": "Generate Question Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Question Embedding": {
      "main": [
        [
          {
            "node": "Prepare Vector for Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if FAQ Found": {
      "main": [
        [
          {
            "node": "Transfer to Discord (No Answer)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Dify Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Vector for Supabase": {
      "main": [
        [
          {
            "node": "Search Similar FAQs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug: Detailed Log": {
      "main": [
        [
          {
            "node": "Check if FAQ Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send ChatWork Reply": {
      "main": [
        [
          {
            "node": "Log to faq_logs (Success)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transfer to Discord (No Answer)": {
      "main": [
        [
          {
            "node": "Log to faq_logs (Fallback)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‚ÄòExecute workflow‚Äô": {
      "main": [
        []
      ]
    },
    "Search Similar FAQs": {
      "main": [
        [
          {
            "node": "Debug: Detailed Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Dify Request": {
      "main": [
        [
          {
            "node": "Call Dify API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Dify API": {
      "main": [
        [
          {
            "node": "Parse Streaming Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Streaming Response": {
      "main": [
        [
          {
            "node": "Send ChatWork Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "executionOrder": "v1"
  },
  "versionId": "c5993cae-c297-4d1a-9e45-d47e57b1a4c7",
  "meta": {
    "instanceId": "bb6582f136488f8663186c75084ae9be2ac2ce1a6068064fd0778c5e05f7b8d2"
  },
  "id": "Mp6GdQrojwzkqMU1",
  "tags": []
}